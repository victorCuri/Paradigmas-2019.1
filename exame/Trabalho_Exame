import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.acl.Group;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;

public class Exame_Trab extends Application{
    
    public class Record{
    
    private SimpleStringProperty f1, f2, f3, f4;
    
    public Record(String f1, String f2, String f3, String f4){
            this.f1 = new SimpleStringProperty(f1);
            this.f2 = new SimpleStringProperty(f2);
            this.f3 = new SimpleStringProperty(f3);
            this.f4 = new SimpleStringProperty(f4);
    }
    
    public String getF1() {
            return f1.get();
    }
    
    public void setF1(String f) {
      f1.set(f);
    }

    public String getF2() {    
        return f2.get();
    }
    
    public void setF2(String f) {
      f2.set(f);
    }
   
    public String getF3() {
        return f3.get();
    }
    
    public void setF3(String f) {
      f3.set(f);
    }

    public String getF4() {
        return f4.get();
    }
    
    public void setF4(String f) {
      f4.set(f);
    }
   
}
    
    private final TableView<Record> tableView = new TableView<>();

    private final ObservableList<Record> dataList
            = FXCollections.observableArrayList();

    @Override
    public void start(Stage primaryStage){
        
        TableColumn<Record,String> columnF1 = new TableColumn<Record,String>("f1");
        TableColumn<Record,String> columnF2 = new TableColumn<Record,String>("f2");
        TableColumn<Record,String> columnF3 = new TableColumn<Record,String>("f3");
        TableColumn<Record,String> columnF4 = new TableColumn<Record,String>("f4");
        
        tableView.getColumns().addAll(columnF1, columnF2, columnF3, columnF4);
        
        columnF1.setCellValueFactory(
                new PropertyValueFactory<Record,String>("f1"));
        columnF2.setCellValueFactory(
                new PropertyValueFactory<Record,String>("f2"));
        columnF3.setCellValueFactory(
                new PropertyValueFactory<Record,String>("f3"));
        columnF4.setCellValueFactory(
                new PropertyValueFactory<Record,String>("f4"));
        
        tableView.setItems(dataList);
        
        final Menu menu = new Menu("File");
        MenuBar menuBar = new MenuBar();
        menuBar.getMenus().add(menu);
        
        MenuItem load = new MenuItem("Load");
        MenuItem save = new MenuItem("Save");
        MenuItem exit = new MenuItem("Exit");
        
        load.setOnAction(new EventHandler<ActionEvent>() {
            @Override 
            public void handle(ActionEvent event) {
                
                FileChooser fileChooser = new FileChooser();
                File file = fileChooser.showOpenDialog(primaryStage);
                String fileName = file.getAbsolutePath();
                
                readCSV(fileName);
            }
        });
        
        save.setOnAction(new EventHandler<ActionEvent>() {
            @Override 
            public void handle(ActionEvent event) {
                
                FileChooser fileChooser = new FileChooser();
 
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("CSV File", "*.csv");
                fileChooser.getExtensionFilters().add(extFilter);
             
                File file = fileChooser.showSaveDialog(primaryStage);
               
                TableColumn<Record, String> column1 = columnF1;
                TableColumn<Record, String> column2 = columnF2;
                TableColumn<Record, String> column3 = columnF3;
                TableColumn<Record, String> column4 = columnF4;
               
                List<String> columnData = new ArrayList<>();
               
                for (Record item : tableView.getItems()) {
               
                   columnData.add(column1.getCellObservableValue(item).getValue());
                   columnData.add(column2.getCellObservableValue(item).getValue()); 
                   columnData.add(column3.getCellObservableValue(item).getValue());
                   columnData.add(column4.getCellObservableValue(item).getValue());
                   columnData.add("\n");
                   
                }
               
                String data = columnData.toString();
               
                adaptString(data);
                data = adaptString(data);
               
                if(file != null){
                    SaveFile(data, file);
                }
            }
        });
        
        exit.setOnAction(new EventHandler<ActionEvent>() {
            @Override 
            public void handle(ActionEvent event) {
                primaryStage.close();
            }
        });
        
        menu.getItems().addAll(load, save, exit);
        
        TextField txtfld1 = new TextField();
        TextField txtfld2 = new TextField();
        TextField txtfld3 = new TextField();
        TextField txtfld4 = new TextField();
    
        Button btn = new Button("Add a line");
        btn.setOnAction(ev -> {
        dataList.add(new Record(txtfld1.getText(),txtfld2.getText(), txtfld3.getText(), txtfld4.getText()));
        });
        
        Button btnDel = new Button("Del");
        btnDel.setOnAction(ev -> {
            int selectedIndex = tableView.getSelectionModel().getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < dataList.size()) {
                 System.out.println("Removing "+selectedIndex);
                 dataList.remove(selectedIndex);
            } else {
                System.out.println("Selected:"+selectedIndex);
            }
        });
        
        TextField tf1 = new TextField();
        TextField tf2 = new TextField();
        TextField tf3 = new TextField();
        TextField tf4 = new TextField();
        
        tableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -> {
        
            if (newSel != null) {
            
                Record selectedItem = (Record) tableView.getSelectionModel().getSelectedItem();
                
                tf1.setText(selectedItem.getF1());
                tf2.setText(selectedItem.getF2());
                tf3.setText(selectedItem.getF3());
                tf4.setText(selectedItem.getF4());
      
            }
        });
        
        Button btnSave = new Button("Save");
        btnSave.setOnAction(ev -> {
            
            Record selectedItem = (Record) tableView.getSelectionModel().getSelectedItem();
      
            selectedItem.setF1(tf1.getText());
            selectedItem.setF2(tf2.getText());
            selectedItem.setF3(tf3.getText());
            selectedItem.setF4(tf4.getText()); 
    
        });
        
        VBox vBox = new VBox();
        vBox.setSpacing(10);
        vBox.getChildren().addAll(menuBar, tableView, txtfld1, txtfld2, txtfld3, txtfld4, btn, tf1, tf2, tf3, tf4, btnSave, btnDel);

        primaryStage.setScene(new Scene(vBox, 700, 250));
        primaryStage.show();

        
    }
    
    private void readCSV(String CsvFile) {
        
        System.out.println("csv file: " + CsvFile);

        String FieldDelimiter = ",";

        BufferedReader br;

        try {
            br = new BufferedReader(new FileReader(CsvFile));

            String line;
            while ((line = br.readLine()) != null) {
                String[] fields = line.split(FieldDelimiter, -1);
               
                Record record = new Record(fields[0], fields[1], fields[2], fields[3]);
                dataList.add(record);

            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Exame_Trab.class.getName())
                    .log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Exame_Trab.class.getName())
                    .log(Level.SEVERE, null, ex);
        }

    }
    
    public String adaptString(String s){
        
        String string = null;
                ;
        for(int i=1; i<s.length();i++){ 
            if(s.charAt(i-1) == '\n' || s.charAt(i+1) == '\n'){
      
            } else {
                char c = s.charAt(i); 
                string += c;
                System.out.println(c);  
            }
        }   
        String strNew = string.replaceFirst("null", "");
        System.out.println(strNew);
        
        return strNew;    
    }
    
    private void SaveFile(String content, File file){
        try {
            FileWriter fileWriter = null;
            
            String strNew = content.replace("]", "");
            strNew = strNew.replace("[", "");
            System.out.println(strNew);
            fileWriter = new FileWriter(file);
            fileWriter.write(strNew);
            fileWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(Exame_Trab.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
 

    
    public static void main(String[] args) {
        launch(args);
    }
    
}
