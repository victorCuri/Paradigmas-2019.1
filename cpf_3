cpfValid :: [Int] -> Bool
cpfValid cpf =
 dv1 == cpf !! 9 && dv2 == cpf !! 10
 where dv1 = cpfDV digits [10,9..]
       dv2 = cpfDV (digits ++ [dv1]) [11,10..]
       dv1 == cpf !! 9 && dv2 == cpf !! 10

cpfDV :: [Int] -> [Int] -> Int
cpfDV digits mults = 
 let expr = (sum $ zipWith (*) digits mults) `mod` 11
 in  if expr < 2 then 0 else 11-expr

     
main :: IO()
main = do
 putStr "CPF: "
 cpf <- getLine
 let digits = (map digitToInt cpf)
 putStrLn (if isCpfOk digits then "OK" else "Not OK")
